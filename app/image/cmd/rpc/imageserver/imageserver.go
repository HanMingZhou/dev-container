// Code generated by goctl. DO NOT EDIT.
// Source: imageServer.proto

package imageserver

import (
	"context"

	"go-zero-container/app/image/cmd/rpc/pb/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetAllImageReq   = pb.GetAllImageReq
	GetAllImageResp  = pb.GetAllImageResp
	GetMyImageReq    = pb.GetMyImageReq
	GetMyImageResp   = pb.GetMyImageResp
	GetUserImageReq  = pb.GetUserImageReq
	GetUserImageResp = pb.GetUserImageResp
	ImageRegistry    = pb.ImageRegistry

	ImageServer interface {
		GetMyImage(ctx context.Context, in *GetMyImageReq, opts ...grpc.CallOption) (*GetMyImageResp, error)
		GetUserImage(ctx context.Context, in *GetUserImageReq, opts ...grpc.CallOption) (*GetUserImageResp, error)
		GetAllImage(ctx context.Context, in *GetAllImageReq, opts ...grpc.CallOption) (*GetAllImageResp, error)
	}

	defaultImageServer struct {
		cli zrpc.Client
	}
)

func NewImageServer(cli zrpc.Client) ImageServer {
	return &defaultImageServer{
		cli: cli,
	}
}

func (m *defaultImageServer) GetMyImage(ctx context.Context, in *GetMyImageReq, opts ...grpc.CallOption) (*GetMyImageResp, error) {
	client := pb.NewImageClient(m.cli.Conn())
	return client.GetMyImage(ctx, in, opts...)
}

func (m *defaultImageServer) GetUserImage(ctx context.Context, in *GetUserImageReq, opts ...grpc.CallOption) (*GetUserImageResp, error) {
	client := pb.NewImageClient(m.cli.Conn())
	return client.GetUserImage(ctx, in, opts...)
}

func (m *defaultImageServer) GetAllImage(ctx context.Context, in *GetAllImageReq, opts ...grpc.CallOption) (*GetAllImageResp, error) {
	client := pb.NewImageClient(m.cli.Conn())
	return client.GetAllImage(ctx, in, opts...)
}
