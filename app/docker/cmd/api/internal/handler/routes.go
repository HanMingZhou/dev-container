// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	docker "go-zero-container/app/docker/cmd/api/internal/handler/docker"
	"go-zero-container/app/docker/cmd/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/createContainer",
				Handler: docker.CreateContainerHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/createContainerByExec",
				Handler: docker.CreateContainerByExecHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/deleteContainerByIds",
				Handler: docker.DeleteContainerByIdsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/downloadContainerLogs",
				Handler: docker.DownloadContainerLogsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getContainerList",
				Handler: docker.GetContainerListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getContainerLogs",
				Handler: docker.GetContainerLogsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/inspectContainer",
				Handler: docker.InspectContainerHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/renameContainer",
				Handler: docker.RenameContainerHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/restartContainer",
				Handler: docker.RestartContainerHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/startContainer",
				Handler: docker.StartContainerHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/stopContainer",
				Handler: docker.StopContainerHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/updateContainer",
				Handler: docker.UpdateContainerHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/docker/v1"),
	)
}
